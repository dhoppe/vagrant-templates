# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  boxes = {
    :centos_6 => {
      :box      => "centos/6",
      :hostname => "centos-6.vagrant.dev",
      :ip       => "192.168.33.10",
    },
    :centos_7 => {
      :box      => "centos/7",
      :hostname => "centos-7.vagrant.dev",
      :ip       => "192.168.33.20",
    },
    :debian_8 => {
      :box      => "debian/jessie64",
      :hostname => "debian-8.vagrant.dev",
      :ip       => "192.168.33.30",
    },
    :debian_9 => {
      :box      => "debian/stretch64",
      :hostname => "debian-9.vagrant.dev",
      :ip       => "192.168.33.40",
    },
    :ubuntu_16 => {
      :box      => "ubuntu/xenial64",
      :hostname => "ubuntu-16.vagrant.dev",
      :ip       => "192.168.33.50",
    },
    :ubuntu_18 => {
      :box      => "ubuntu/bionic64",
      :hostname => "ubuntu-18.vagrant.dev",
      :ip       => "192.168.33.60",
    },
  }

  if Vagrant.has_plugin?("vagrant-hostmanager")
    config.hostmanager.enabled = true
    if Vagrant.has_plugin?("landrush")
      config.hostmanager.manage_host = false
    else
      config.hostmanager.manage_host = true
    end
    config.hostmanager.manage_guest = true
    config.hostmanager.ignore_private_ip = false
    config.hostmanager.include_offline = true
  end

  boxes.each do |name, setup|
    config.vm.define name do |local|
      unless setup[:box]
        local.vm.box = "centos/7"
      else
        local.vm.box = setup[:box]
      end

      local.vm.hostname = setup[:hostname]

      if Vagrant.has_plugin?("landrush")
        local.landrush.enabled = true
        local.landrush.tld = "vagrant.dev"
      end

      if Vagrant.has_plugin?("vagrant-cachier")
        local.cache.scope = :machine

        if setup[:box] =~ /ubuntu/
          local.cache.synced_folder_opts = {
            owner: "_apt"
          }
        end
      end

      if Vagrant.has_plugin?("vagrant-puppet-install")
        local.puppet_install.puppet_version = "5.5.14"
        # local.puppet_install.puppet_version = "6.4.2"
      end

      if Vagrant.has_plugin?("vagrant-r10k")
        local.r10k.puppet_dir = "environments/dev"
        local.r10k.puppetfile_path = "environments/dev/Puppetfile"
        local.r10k.module_path = "environments/dev/modules"
      end

      if Vagrant.has_plugin?("vagrant-vbguest")
        local.vbguest.auto_update = true
      end

      # Disable automatic box update checking. If you disable this, then
      # boxes will only be checked for updates when the user runs
      # `vagrant box outdated`. This is not recommended.
      local.vm.box_check_update = true
    
      # Create a forwarded port mapping which allows access to a specific port
      # within the machine from a port on the host machine. In the example below,
      # accessing "localhost:8080" will access port 80 on the guest machine.
      # NOTE: This will enable public access to the opened port
      # config.vm.network "forwarded_port", guest: 80, host: 8080
    
      # Create a forwarded port mapping which allows access to a specific port
      # within the machine from a port on the host machine and only allow access
      # via 127.0.0.1 to disable public access
      # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"
    
      # Create a private network, which allows host-only access to the machine
      # using a specific IP.
      local.vm.network "private_network", ip: setup[:ip]
    
      # Create a public network, which generally matched to bridged network.
      # Bridged networks make the machine appear as another physical device on
      # your network.
      # config.vm.network "public_network"
    
      # Share an additional folder to the guest VM. The first argument is
      # the path on the host to the actual folder. The second argument is
      # the path on the guest to mount the folder. And the optional third
      # argument is a set of non-required options.
      local.vm.synced_folder "projects", "/home/vagrant/projects",
        mount_options: ["dmode=755", "fmode=644"]
    
      # Provider-specific configuration so you can fine-tune various
      # backing providers for Vagrant. These expose provider-specific options.
      # Example for VirtualBox:
      #
      local.vm.provider "virtualbox" do |vb|
        # Display the VirtualBox GUI when booting the machine
        vb.gui = false
    
        # Customize the amount of memory on the VM:
        unless setup[:memory]
          vb.memory = "1024"
        else
          vb.memory = setup[:memory]
        end

        # Customize the amount of cpus on the VM:
        unless setup[:cpus]
          vb.cpus = "2"
        else
          vb.cpus = setup[:cpus]
        end
      end
      #
      # View the documentation for the provider you are using for more
      # information on available options.
    
      # Enable provisioning with a shell script. Additional provisioners such as
      # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
      # documentation for more information about their specific syntax and use.
      local.vm.provision "puppet" do |puppet|
        puppet.environment_path = "environments"
        puppet.environment = "dev"
        puppet.hiera_config_path = "environments/dev/hiera.yaml"
        puppet.options = "--verbose"
      end
    end
  end
end
